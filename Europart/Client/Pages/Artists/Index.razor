@page "/artist"
@using EuropArt.Shared.Artists
@using EuropArt.Client.Artists
@using EuropArt.Shared.Common
@inject IArtistService ArtistService
@inject IStringLocalizer<EuropArt.Shared.Resources.Artists.Index> Loc

<h3>@Loc["titel"]</h3>

<div class="row">
    @if (artists is null)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="row align-items-end text-end">
            <div class="col-4">
                <input class="form-control" placeholder="Search" type="search" @bind="Filter.Searchterm" />
                <select @bind="Filter.OrderBy" class="form-select mb-3" aria-label="Default select example">
                    <option value="OrderByNewest">Newest Artist</option>
                    <option value="OrderByOldest">Oldest Artist</option>
                    <option value="OrderByName">Name</option>
                </select>
            </div>
        </div>
        @foreach (var artist in artists)
        {
            <div class="col-4 text-center">
                <div class="badge-kunstenaars">
                    <div class="profile-pic">
                        <a href="/artist/@artist.Id"><img src="@artist.ImagePath" /></a>
                    </div>
                    <h2>@artist.Name</h2>
                    <span class="locatie"><img src="images/locate.svg" /> @artist.City</span><br />
                    <span class="kunstwerken">@artist.AmountOfArtworks @Loc["artworks"]</span>
                </div>
            </div>
        }
    }
</div>

@code {
    private List<ArtistDto.Index> artists;
    private ArtistFilter Filter = new();

    protected override async Task OnInitializedAsync()
    {
        Filter.OnArtworkFilterChanged += FilterArtistsAsync;
        Filter.OrderBy = OrderByArtist.OrderByName;

        ArtistRequest.GetIndex request = new();
        var response = await ArtistService.GetIndexAsync(request);
        artists = response.Artists;
    }

    private async void FilterArtistsAsync()
    {
        ArtistRequest.GetIndex request = new()
        {
            Searchterm = Filter.Searchterm,
            OrderBy = Filter.OrderBy
        };

        var response = await ArtistService.GetIndexAsync(request);
        artists = response.Artists;
        StateHasChanged();
    }

    public void Dispose() 
    {
        Filter.OnArtworkFilterChanged -= FilterArtistsAsync;
    }
}
