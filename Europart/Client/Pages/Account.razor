@page "/account"
@attribute [Authorize]
@inject IStringLocalizer<EuropArt.Shared.Resources.Account> Loc
@using EuropArt.Shared.Accounts
@using EuropArt.Shared.Artists
@using EuropArt.Shared.Artworks
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager

<AuthorizeView Roles="Admin">
    <h1>Hello Admin! @context.User.Identity.Name!</h1>
</AuthorizeView>
<AuthorizeView Roles="Buyer">
    <h1>Hello User! @context.User.Identity.Name!</h1>
</AuthorizeView>
<AuthorizeView>
    <Authorized>
        @foreach(var claim in context.User.Claims)
        {
            <p>@claim.Value</p>
        }
        @context.User.Claims.ElementAt(4).Value
    </Authorized>
</AuthorizeView>

<AuthorizeView Roles="Artist">
@if(artist is not null) {
@foreach(var item in artist.Likes)
{
    
    <p>@item.Artwork.Name</p>
}
}
</AuthorizeView>
<AuthorizeView Roles="User">
@if(user2 is not null) {
@foreach(var item in user2.Likes)
{
    
    <p>@item.Artwork.Name</p>
    
}
}
</AuthorizeView>



@code{
    private ArtistDto.Detail artist;
    private AccountDto.Index user2;

    [Parameter] public int Id { get; set; }
    [Inject] public IArtistService ArtistService { get; set; }
    [Inject] public IArtworkService ArtworkService { get; set; }
    [Inject] public IAccountService AccountService { get; set; }
    [Inject] public AuthenticationStateProvider auth { get; set; }

    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await auth.GetAuthenticationStateAsync();
        var user = authState.User;
        var authId = user.Claims.ElementAt(4).Value.Substring(6);

        ArtistRequest.GetDetailByAuthId request = new() { AuthId = authId };
        var response = await ArtistService.GetDetailByAuthIdAsync(request);
        artist = response.Artist;

        AccountRequest.GetIndex request2 = new() { AuthId = authId };
        var response2 = await AccountService.GetIndexAsync(request2);
        user2 = response2.User;
    }
}