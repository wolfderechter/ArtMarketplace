@page "/artwork/{id:int}"
@inject NavigationManager NavigationManager
@using EuropArt.Domain.Common
@using EuropArt.Shared.Accounts
@using EuropArt.Shared.Artists
@using EuropArt.Shared.Artworks
@inject IStringLocalizer<EuropArt.Shared.Resources.Artworks.Detail> Loc
@inject IJSRuntime JSRuntime
@using EuropArt.Client.Pages.Ordering;
@if (artwork == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @*<p>@_artwork.Id</p>
        <p>@_artwork.Name</p>
        <p>@_artwork.Description</p>
        <p>@_artwork.Price.ToString("C")</p>
        <img src="@_artwork.ImagePath" />*@
    <div class="row">
        <AuthorizeView Roles="Admin">
            <Authorized>
                <div class="col-12 text-end mb-3">
                    <div class="admin-buttons">
                        <a class="edit" href="/artwork/edit/@artwork.Id"><img src="/images/edit.svg" /></a>
                        <button  @onclick="ConfirmDelete"><img src="/images/delete.svg" /></button>
                    </div>
                </div>
            </Authorized>
        </AuthorizeView>
        <div class="col-md-8 col-12">
            <div class="badge-kunstwerk text-center" style="padding: 0;">
                @if(imagepaths is not null)
                {
                    if(imagepaths.Count() > 1)
                    {
                        <button class="btn" style="background-color: #372c2e; color:white;" @onclick="PreviousImage">&lt</button>
                        <img src="@imagepaths[imageNumber].imagePath" style="max-width:60%;">
                        <button class="btn" style="background-color: #372c2e; color:white;" @onclick="NextImage">&gt</button>

                    }
                    else {
                        <img src="@imagepaths[imageNumber].imagePath" style="width:auto;">
                    }
                }
            </div>
            <h2 class="mb-1">@artwork.Name</h2>
            <h4 class="kunstenaar"><a href="/artist/@artwork.ArtistId"><span style="color:#b1b4b7">@Loc["By"]</span> @(artwork.ArtistFirstName + " " + artwork.ArtistLastName)</a></h4>
            <h5 style="color:#b1b4b7">@Loc["UploadedOn"] @artwork.DateCreated.ToString("dd MMMM yyyy")</h5>
            <p>@artwork.Description</p>
        </div>
        <div class="col-md-4 col-12">
            <div class="bieden">
                <span class="prijs-groot">@artwork.Price.ToString("C")</span>
                <button disabled="@artwork.IsSold" @onclick="AddToCart" class="btn btn-winkelmand mb-3">@Loc["ShoppingCart"]</button>
                <AuthorizeView Roles="Artist">
                    <Authorized>
                        @if(artist?.Id == artwork.ArtistId)
                        {
                            <a class="btn btn-bieden mb-3" href="/artwork/edit/@artwork.Id">@Loc["Edit"]</a>
                        @if (RequestingDelete)
                        {
                            <button class="btn btn-bieden mb-3" @onclick="CancelRequestDelete">@Loc["CancelDelete"]</button>
                            <button class="btn btn-bieden mb-3" @onclick="ConfirmDelete">@Loc["ConfirmDelete"]</button>
                        }
                        else
                        {
                            <button class="btn btn-bieden mb-3" @onclick="RequestDelete">@Loc["Delete"]</button>
                        }
                        }
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
    </div>
}



@code {
    private ArtworkDto.Detail artwork = new();
    private bool RequestingDelete;
    private List<ImagePath> imagepaths;
    private int imageNumber = 0;
    private ArtistDto.Detail artist;

    [Parameter] public int Id { get; set; }
    [Inject] public IArtworkService ArtworkService { get; set; }
    [Inject] public IArtistService ArtistService { get; set; }
    [Inject] public Shoppingcart Cart { get; set; }
    [Inject] public AuthenticationStateProvider auth { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        var authState = await auth.GetAuthenticationStateAsync();
        var user = authState.User;

        ArtworkRequest.GetDetail request = new() { ArtworkId = Id };
        var response = await ArtworkService.GetDetailAsync(request);
        artwork = response.Artwork;
        imagepaths = response.Artwork.ImagePaths;

        if (user.Identity.IsAuthenticated)
        {
            var authId = user.Claims.ElementAt(4).Value.Substring(6);

            ArtistRequest.GetDetailByAuthId request2 = new() { AuthId = authId };
            var response2 = await ArtistService.GetDetailByAuthIdAsync(request2);
            artist = response2.Artist;
        }
    }

    private async Task ConfirmDelete()
    {
        var request = new ArtworkRequest.Delete { ArtworkId = Id };
        await ArtworkService.DeleteAsync(request);
        NavigationManager.NavigateTo("/artwork");
    }

    private void RequestDelete()
    {
        RequestingDelete = true;
    }
    private void CancelRequestDelete()
    {
        RequestingDelete = false;
    }

    private void AddToCart()
    {
        Cart.AddItem(artwork.Id, artwork.Name, artwork.Price, artwork.ImagePaths[0].imagePath);
        Console.WriteLine(Cart.Items.Count);
    }

    private void NextImage()
    {
        imageNumber = (imageNumber + 1) % artwork.ImagePaths.Count();
    }
    private void PreviousImage()
    {
        imageNumber = (imageNumber - 1 + artwork.ImagePaths.Count()) % artwork.ImagePaths.Count();
    }
}
