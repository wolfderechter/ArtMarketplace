@page "/artwork/add"
@inject IStringLocalizer<EuropArt.Shared.Resources.Artworks.Create> Loc
@inject IArtworkService ArtworkService
@inject StorageService StorageService
@using EuropArt.Shared.Artworks
@using EuropArt.Client.Infrastructure
@inject NavigationManager NavigationManager 

<h1 class="text-center">@Loc["AddArtwork"]</h1>

<div class="row">
    <div class="col-md-8 offset-md-2 col-12 offset-0">
        <EditForm Model="@newArtwork" OnValidSubmit="CreateNewArtwork" class="form">
            <FluentValidationValidator />
            <DataAnnotationsValidator />
            <div class="mb-3">
                <h6>@Loc["Title"]</h6>
                <InputText class="form-control" id="exampleInputTitle" @bind-Value="newArtwork.Name"
                           aria-describedby="titleHelp" placeholder="Enter title" />
                <ValidationMessage For="@(() => newArtwork.Name)" />
            </div>
            <div class="mb-3">
                <h6>@Loc["Description"]</h6>
                <InputText @bind-Value="newArtwork.Description" class="form-control" id="exampleInputDescription1"
                           placeholder="Enter description" />
            </div>
            <div class="mb-3">
                <h6>@Loc["Price"]</h6>
                <InputNumber @bind-Value="newArtwork.Price" class="form-control" placeholder="Enter price" />
                <ValidationMessage For="@(() => newArtwork.Price)" />
            </div>
            <div class="mb-3">
                <h6>@Loc["Category"]:</h6>
                <InputSelect @bind-Value="newArtwork.Category" class="form-select mb-3" aria-label="Default select example">
                    <option value="photography">@Loc["Photography"]</option>
                    <option value="painting">@Loc["Paintings"]</option>
                    <option value="sculpture">@Loc["Sculptures"]</option>
                    <option value="drawing">@Loc["Drawings"]</option>
                    <option value="other">@Loc["Other"]</option>
                </InputSelect>
            </div>
            <div class="mb-3">
                <h6>@Loc["Style"]:</h6>
                <InputSelect @bind-Value="newArtwork.Style" class="form-select mb-3" aria-label="Default select example">
                    <option value="abstract">@Loc["Abstract"]</option>
                    <option value="classic">@Loc["Classic"]</option>
                    <option value="minimalism">@Loc["Minimalism"]</option>
                    <option value="modern">@Loc["Modern"]</option>
                    <option value="surrealism">@Loc["Surrealism"]</option>
                    <option value="other">@Loc["Other"]</option>
                </InputSelect>
            </div>
            <div class="mb-3">
                <h6>@Loc["ChooseArtwork"]</h6>
                <InputFile OnChange="LoadImages" class="file-input" name="artwork" accept="image/*" multiple/>
                <div class="col">
                    @foreach(var file in images)
                    {
                        <span class="file-name row gx-0">
                            @file.Name
                        </span>
                    }
                </div>

                <ValidationMessage For="@(() => newArtwork.ImagePath)" />

            </div>
            <div class="mb-3">
                <button disabled="@(SaveButtonIsClicked)" type="submit" class="btn btn-primary">@Loc["Add Artwork"]</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    ArtworkDto.Create newArtwork = new() {};
    private IBrowserFile image;
    private List<IBrowserFile> images = new();
    private bool SaveButtonIsClicked = false;

    private async Task CreateNewArtwork()
    {
        SaveButtonIsClicked = true;
        newArtwork.DateCreated = DateTime.Now;
        newArtwork.ImagePath = image.Name;
        newArtwork.ImagePaths = images.Select(x => x.Name).ToList();

        ArtworkRequest.Create request = new()
        {
            Artwork = newArtwork
        };

        //response zal sas-token bevatten uiteindelijk
        var response = await ArtworkService.CreateAsync(request);
        for(var i = 0; i < response.UploadUris.Count(); i++)
        {
            var uploadUri = response.UploadUris[i];
            await StorageService.UploadImageAsync(uploadUri, images[i]);

        }
        NavigationManager.NavigateTo("/artwork");
    }

    private void LoadImages(InputFileChangeEventArgs args)
    {
        foreach(var file in args.GetMultipleFiles())
        {
            images.Add(file);
        }
    }
}